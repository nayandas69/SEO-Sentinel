name: Python Package CI and Publish

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write  # Needed for managing repository content
  packages: write  # Required to publish packages to PyPI

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      # Step 3: Upgrade pip and install build dependencies
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip setuptools wheel twine

      # Step 4: Build the package
      - name: Build the package
        run: |
          python setup.py sdist bdist_wheel

      # Step 5: Check if version already exists on PyPI
      - name: Check if version exists on PyPI
        id: check-version
        run: |
          PACKAGE_NAME="seo-sentinel"
          VERSION=$(python setup.py --version)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://pypi.org/project/$PACKAGE_NAME/$VERSION/)
          if [ "$STATUS_CODE" -eq 200 ]; then
            echo "Version $VERSION already exists on PyPI. Skipping upload."
            echo "upload_required=false" >> $GITHUB_ENV
          else
            echo "Version $VERSION is not published on PyPI. Upload will proceed."
            echo "upload_required=true" >> $GITHUB_ENV

      # Step 6: Publish to PyPI (only if required)
      - name: Publish to PyPI
        if: env.upload_required == 'true'
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m twine upload dist/*
          echo "âœ… Successfully published version $VERSION to PyPI."

      # Step 7: Cleanup generated files
      - name: Cleanup Distribution Files
        run: |
          rm -rf dist/ build/ *.egg-info
          echo "ðŸš® Cleanup complete."

      # Step 8: Workflow summary
      - name: Workflow Summary
        run: |
          echo "Version: $VERSION"
          echo "Upload required: ${{ env.upload_required }}"
